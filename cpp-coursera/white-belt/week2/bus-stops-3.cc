#include <iostream>
#include <set>
#include <string>
#include <map>

// В этой задаче вам нужно присваивать номера автобусным маршрутам.
//
// А именно, для каждого маршрута, заданного множеством названий остановок, нужно либо выдать
// новый номер (первому маршруту — 1, второму — 2 и т. д.), либо вернуть номер существующего
// маршрута, которому соответствует такое множество остановок.
//
// В отличие от задачи «Автобусные остановки — 2», наборы остановок, которые можно получить
// друг из друга перестановкой элементов или добавлением/удалением повторяющихся, следует
// считать одинаковыми.
//
// Формат ввода
// Сначала вводится количество запросов Q, затем Q описаний запросов.
//
// Каждый запрос представляет собой положительное количество остановок N, за которым следуют
// разделённые пробелом N названий остановок соответствующего маршрута (не обязательно различных).
// Названия остановок состоят лишь из латинских букв и символов подчёркивания.
//
// Формат вывода
// Выведите ответ на каждый запрос в отдельной строке.
//
// Если маршрут с данным набором остановок уже существует, в ответ на соответствующий
// запрос выведите Already exists for i, где i — номер маршрута с таким набором остановок.
// В противном случае нужно выделить введённому набору остановок новый номер i и вывести
// его в формате New bus i.

using std::cin;
using std::cout;
using std::set;
using std::string;
using std::map;
using std::endl;

set<string> ReadBusStops(size_t stops){
  set<string> bus_stops;
  string stop;
  for(size_t i = 0; i < stops; i++){
    cin >> stop;
    bus_stops.insert(stop);
  }
  return bus_stops;
}

int main() {
  size_t q, n;
  cin >> q;
  map<set<string>,size_t> bus_stops_dict;
  for(; q > 0; q--){
    cin >> n;
    set<string> bus_stops = ReadBusStops(n);
    if(bus_stops_dict.count(bus_stops) == 0){
      size_t new_bus =  bus_stops_dict.size() + 1;
      bus_stops_dict[bus_stops] = new_bus;
      cout << "New bus " << bus_stops_dict.size() << endl;
    } else {
      cout << "Already exists for " << bus_stops_dict[bus_stops] << endl;
    }
  }
  return 0;
}

