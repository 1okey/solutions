#include <iostream>
#include <string>
#include <map>

// Слова называются анаграммами друг друга, если одно из них можно получить перестановкой букв в
// другом. Например, слово «eat» можно получить перестановкой букв слова «tea», поэтому эти слова
// являются анаграммами друг друга. Даны пары слов, проверьте для каждой из них, являются ли слова
// этой пары анаграммами друг друга.
//
// УКАЗАНИЕ
// Один из способов проверки того, являются ли слова анаграммами друг друга, заключается в следующем.
// Для каждого слова с помощью словаря подсчитаем, сколько раз в нём встречается каждая буква.
// Если для обоих слов эти словари равны (а это проверяется с помощью обычного оператора ==),
// то слова являются анаграммами друг друга, в противном случае не являются.
//
// При этом построение такого словаря по слову удобно вынести в отдельную функцию BuildCharCounters.
//
// ФОРМАТ ВВОДА
// Сначала дано число пар слов N, затем в N строках содержатся пары слов, которые необходимо
// проверить. Гарантируется, что все слова состоят лишь из строчных латинских букв.
//
// ФОРМАТ ВЫВОДА
// Выведите N строк: для каждой введённой пары слов YES, если эти слова являются анаграммами, и NO
// в противном случае.


using std::cin;
using std::cout;
using std::string;
using std::map;
using std::endl;

map<char,int> Letters(string& w){
  map<char,int> chars;
  for(char& c : w){
    chars[c]++;
  }
  return chars;
}

int main() {
  size_t n;
  string w1,w2;
  cin >> n;
  while(n > 0){
   cin >> w1 >> w2;
   cout << (Letters(w1) == Letters(w2) ? "YES" : "NO") << endl;
    --n;
  }
}

